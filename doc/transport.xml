====Draft design of protocol for Pandora p2p social net
====Диалоги двух узлов Pandora

I. Первоначальная версия синхронного протокола.

Записано в xml-формате, но реализован он был в байтовом виде.
Каждая команда (init,notice,record и т.д.) - 1 байт.
Код команды (её параметр) - еще один байт.
Ну и блок данных переменной длинны, зависимый от команды.

В реализации присутствует также индекс команды - 1 байт, для контроля очередности,
и отслеживания пропавших пакетов (для протокола udp).

Плюс 1 байт CRC8 - для контроля целостности команды и её параметров, чтобы
отслеживать сбои в формировании пакетов, или отсеивать случайный шум из инета.
Если CRC сбит, то разговор считается сорвавшимся, и соединение разрывается.


-----Инициатор-пассив

1. Можно по PP01? Требую сжатый/Прошу сжатый/Требую xml/Прошу xml (GET HTTP)
Нет, отвали/Да, слушаю PP01

Q: <init code=0..4 service="pandora 0.1" ]/>
A: <bye code=1 period=0 mes="your ip is banned" />
   <wait code=1 period=5 mes="your ip is banned for 5 minutes" />
   <wait code=2 period=5 mes="limit is exeeded, wait 5 minutes" />
   <more code=1 period=0 mes="try to use packed protocol" />
   <more code=2 period=0 mes="try to use xml protocol" />
   <more code=3 period=1 mes="decide a captcha (i just will sent)" />
   <init code=0..4 service="pandora 0.1" />
(если второй потребовал, первый или вновь предлагает, или прощается)

2. Предлагаю сразу работать на сеансовой отмычке с хештегом таким-то, готов?
Да/Нет, давай по полному циклу
Q: <init code="!!!" hash-tag="g443e3" />
A: <init code=1 mes="Погнали!" />
   (оостальные ответы см 2.0)
(прямая работа по отмычкам должна быть опциональной)
(при поддержке с.отмычки, всё же возможен обмен после подписанных фраз)

2.0. Я pan-hash, знаешь меня, есть ключ? дай фразу
Иди нах/Я тебя не знаю, дай полный ключ/Ты в очереди, жди/Подпиши-ка фразу

Q: <init code=1 pan-hash="fff999" />
A: <bye code=11 mes="this key is banned" />
   <more code=11 mes="give me open key" />
   <wait code=12 mes="this key is in the queue" />
   <init code=1 phrase="Aaaaaaaaaaaa111111111111" />

2.1. Держи мой pub-key, дак дашь фразу?
Ты в очереди, жди/Держи

Q: <init code=2 pub-key="asfasfasfsafsfsafas" />
A: <wait code=21 mes="this key is in the queue" />
   <init code=1 phrase="Aaaaaaaaaaaa111111111111" />

3. Вот ЭЦП фразы, дай свой pan-hash?
Неверно, досвидос/Правильно, держи

Q: <init code=3 sign="b1c2de" />
A: <bye code=31 mes="sign is bad" />
   <init code=3 hash-key="eee555" />

4. Знаю твой ключ, но подпиши-ка фразу/Я не знаю тебя, дай pub-key/Ты добавлен в очередь
Вот мой пуб-кей/Вот ЭЦП фразы

Q: <init code=4 phrase="Bbbbbbbbbbb111111111111" />
   <bye code=41 mes="this key is banned" />
   <wait code=41 mes="this key is in the queue" />
   <wait code=42 mes="i don't know this key" />
A: <init code=3 sign="b1c2de" />
   <init code=2 pub-key="dfbdfbdffsafsfsafas" />

4.1. Верная подпись, дай ЭЦП фразы/Подпись неверная, пока
Лови ЭЦП

Q: <init code=4 phrase="Bbbbbbbbbbb111111111111" />
   <bye code=45 mes="sign is bad" />
A: <init code=3 sign="b1c2de" />

===Если подпись ок, то дальше данные шифруются (!!-RSA, !-BF)===

5. Хорошо, вот твои права и сеанс-кей/Подпись ошибочна, пока
А вот твои права; новый сеанс/продолжим сеанс

Q: <init!! code=5 permission="0100001" ses-key="3432423" [term="3 days"] />
   <bye code=51 mes="sign is bad" />
A: <init!! code=5 permission="0100001" ses-key="3453453" [term="5 days"] />  #брать чейнджи, делать запросы баз [до даты], писать мне, звонить мне

6. Дай пачку сортов что изменились с 30.12.2000 по настоящее
Нет/ Бери 5 штук

Q: <query! code=0 from-date=30.12.2000 />
A: <news! code=0 count=5 data="8,11,14" />

6.1. Дай ченджи по типу kind=8 (kind=255 все типы) с 30.12.2000 по настоящее
Нет/ Бери 15 штук (щас я поведу)
Начинай!

Q: <query! code=255 from-date=30.12.2000 />
A: <news! code=8 count=15 />
Q: <more code=0 />

-----Пассив-инициатор

7. Изменена запись Тип/id/хэш/старый хэш(если есть), надо?
Не надо/Давай патч/Давай запись/Давай миниатюру

A: <notice kind=1 id=12345 hash="a1b4b4b4b4" [old-hash="b1c2aaa2"]  />
Q: <more code=0 />
   <more code=1 />
   <more code=2 />
   <more code=3 />

8. Патч (?code=1-255 -число кусков, 0-больше 255)  Тип/id/старый хэш (если есть)/[новый хэш]
Поймал, давай следующий кусок/нотис

A: <patch code=0 length16=0-MaxSeg|0xFFFF data="[|length32,full_crc32,seg_len16]zxcvbn(seg_crc32)" />
   <record code=0 data="zxcvbnm1123334" />
второй и следующие куски:
[A]: <data="(seg_ind32)(seg-len16)zxcvbnm1123334(seg_crc32)" />
[Q]: <more code=0 />

я кончил, давай дальше
A: <more code=0 />

-----Инициатор-пассив

9. Дай полную запись

Q: <request kind=4 id=12345 hash="a7c8d8" />
A: <record size=718 data="zxcvbnm1123334" />

#10. Дай отмычку номер
#Нету/Бери
#Q: <request kind=55 id=123 />
#A: <record size=718 data="zxcvbnm1123334" />

#9. Дай мне свои узлы все (потом после 12:58 30.12.2000)
#Нет/Бери 7 штук

(в пределах п. 6)

#Пассив-инициатор

#10. Узел key, надо?
#Давай/Нет

#11. Узел key/ip/person
#Поймал

#Инициатор-пассив

#12. Дай по узлу key что есть (4-6)
#Не подписан/ Бери 5 штук

13. Открой трубу на key
Нет/Бери

Q: <pipe code=0 key="a1b2c3" />
A: <more code=125 />
   <bye code=1 />

Диалог в трубе идеентичный.
Сигналом для закрытия трубы становится отсоединение одного из узлов,
или сообщение инициатора с ключом хоста и маркером трубы:
Q: <pipe code=125 hostkey="b1b2b3" />

14. Спасибо, пока/Про меня спросишь?
Да/Нет

Q: <bye code=0 />
   <more code=1 />
A: <more code=0 />
   <bye code=1 />

8. Давай
(далее идут запросы ченджей 4-6, Пассив-инициатор)



II. Эскиз, показывающий принцип асинхронного протокола (не реализован!)


--синхронно
H.Q1: Привет! Я пандорианец версия 0.1. Прошу сжатие, но не требую. [панхэш отмычки=a2c5df]
L.A1: Привет! Я пандорианец версия 0.1. Прошу без сжатия, и требую. [отмычку знаю, поехали/нет, полный цикл]

--асинхронно
ЗО2:+ Дай мне статьи Михаила Михайлова?
ЗС2:+ А ты кто?
С3:+ У тебя есть вакансии "Программист"?
О3:-С2 Я Иван Иванов.
О4:+ А ты кто?
С4:-О4 Я Петя Петров.
О2:+ Повтор1. Дай мне статьи Михаила Михайлова?
С5:-О2 Статей нет.
О5:-С3 Лови две вакансии.
О6:+ Примешь канал1 звука и канал2 видео?
С6:-О6 Давай канал1 и канал2.
О0:= Канал1. Лови кусок звука!
С7:-O5 Ловлю вакансии.
О0:= Канал2. Лови кусок видео!
О0:= Канал2. Лови кусок видео!
О7:+ Вакансия 1.
С8:+ У тебя есть файлы Федора Федорова?
С9:-О7 Поймал вакансию.
О8:+ Вакансия 2.
О0:= Канал2. Лови кусок видео!
О9:-С7 Лови список файлов.
О0:= Канал2. Лови кусок видео!


Запрос/ответ.
Длина (2 байта), Номер (+2 байта), Запрос или ответ (1 байт), Уточнение (1 байт), CRC (1 байт), [тело (0..65000)]

Блок медиа.
Длина (2 байта), Канал (-1 байт), Номер (1 байт), Данные (1..65000)


Пакет: запрос-ответный, или мультимедийный
Запрос, Запрос, Ответ, Запрос, Ответ, Ответ
Блок звука, Блок звука, Блок видео, Блок звука




Типы сегментов:
init - инициализация диалога (версия протокола, сжатие, авторизация, шифрование)
message - мгновенное текстовое сообщение
channel - запрос открытия медиа-канала
query - запрос пачки сортов или пачки панхэшей
news - пачка сортов или пачка панхэшей измененных записей
request - запрос записи/патча/миниатюры
record - выдача записи
patch - выдача патча
image - выдача миниатюры
wait - временно недоступен
more - давай дальше
bye - рассоединение



Источники мгновенных данных - где брать:
- мгновенное сообщение - буфер сообщений, база сообщений
- аудио-видео поток - буферы блоков медиа по каналам
- игровой трафик - буферы игровых данных по каналам
- создание/изменение записи на узле - буфер уведомлений, база

Источники запросных данных:
- база

Кто создает данные на отправку:
1) обрабочик буферов - проверяет буферы, берет из них данные, пакует в пакеты
2) обработчик пришедших запросов, по запросу читает записи из базы, формирует серию пакетов

Кто принимает данные:
1) обрабочик пришедших медиа/игровых пакетов, раскладывает данные из пакетов по буферам каналов
2) обработчик пришедших записей, сводит данные из пакетов в записи в базе. после успешной записи обработчик "передвигает" дату последнего запроса

Прием пакетов:
1) пакеты раскладываются по буферам
2) если сбой в нумерации на протяжении 10 (для авторизованных 100) пакетов высылается запрос на повтор нужного номера
   Потерянные медиапакеты не запрашиваются, но статистика сбоя по ним ведется.
   У получателя ведется буфер потерянных номеров и время потери, с последней потери ведется история пакетов,
   обработчик берет пакеты до первого потерянного.
   Отправитель помнит 100 отравленных пакетов, или меньше, если косвенно удалось выявить получение (например,
   пришел ответ на запрос).
3) если процент сбоев в единицу времени превышает лимит, высылается пакет "внимание! 5 сбоев за 10 секунд",
   отправитель принимает меры по уменьшению потерь (снижает скорость отправки), иначе сенс рвется со штрафом.
   Или анализируется производительность обмена, и ищется максимум невзирая на потери, но не более 5% например.
   Уровень потерь может согласовываться при инициализации соединения в начале обмена.
   Также может согласовываться максимальная скорость обмена, каждый узел может сообщить какую скорость
   он в состоянии принимать.


Запросы и возможные ответы на них:

1) init, code=0, протокол
согласование протокола
a: init, code=1, xxxx
ответ параметры согласованы как xxxx

2) init, code=2, отмычка
предлагаю шифроваться на ключе с отмычкой
a: ok
отмычка принята, поехали

3) sync
это синхронизация, и еще я живой, а ты?
a: sync
сегменты синхронизированы, я тоже живой

4) channel, code=1, кодек
Открой канал 1 с кодеком
a: channel, code=-1, [кодек]
Канал 1 открыт.


Посылы без подтверждения (точнее, подтверждение исходит из контроля нумерации пакетов)
1) message
сообщение.
