
Что сделать
(- не сделано, = начато, + сделано, ! критично, ? ненужно):


1. БАЗЫ ДАННЫХ

+ баг: затирание домена айпишником (похоже, при встречном подключении через шлюз)
+ баг: при соединении у узла затирается порт пустым значением
+ баг: при соединении сброс у узла флага "храню"
= автоматическое конвертирование при изменении структры базы, выводится форма с
  переносом полей (сейчас сделано пока только автодобавление новых полей)
+ при удалении записи создавать связь "игнорировать", чтобы больше не загружалась,
  а лучше сделать галочку "игнорировать" в диалогах удаление и правка
= расчет рейтинга ключей, людей и других записей; с учетом активного юзера и без
- запись рейтингов ключей в базу, пересчет и измнение при получении новой подписи
= загрузка/выгрузка [во] внешни[х,е] таблиц[ы], баз данных в разных форматах: csv, xml,
  json, pson, dbf, ods, xls. при выгрузке возможность указывать какие столбцы и какие
  записи. при загрузке - соответствие полей таблицы/базы с полями объекта
- шедулер, который пасёт каталог/файл/таблицу во внешней базе и при их изменении,
  создает записи в базе "файлы" или импортирует записи. уже загруженное регистрируется
  в таблице "загружено", а задания на загрузку/выгрузку добавляются в таблицу
  "загрузка/выгрузка"
- параметры есть общие (creator=nil), а есть личные (creator задан), указывается
  при записи, при чтении сначала ищется личный, если не найдет, читается общий
+ в версии 0.2 поменять формулу панхэша ключа - на хэш sha2-256 длинною 20 байт
- сохранение лога в базу и файлы, просмотр истории лога, подгрузка лога в лоток
- добавить сметы для планирования, оценки по времени и затратам конкретных действий
- автоматическая биржа, обменивающая менее доверенные расписки на более доверенные
- настройка поиска курсов: д,м,[д],[м],г,[г]. т.е. в локальной базе или по веткам доверия
- распределённое хранилище файлов для друзей размером 300 Мб, каждому < 30 Мб.
  хранитель шифрует и раскидывает свои файлы (согласно рейтингу) по друзьям (согласно
  надёжности). хранитель работает в общем цикле шедулера
- буфер для [шифрованных] посылок. кладут только доверенные. забирают любые. анонимность
  обеспечивается многократной перекладкой писем по доверенным веткам. доставка
  обеспечивается указанием региона (места) назначения и панхэшем основного или временного
  ключа получателя. отправитель указан открыто или закрыто. посылка может содержать
  несколько записей. в посылке могут быть указаны теги, а буфер может принимать только
  определенные теги. посылки раскидываются по всей ветке доверия, хранятся 20 минут,
  за исключением полученных на своё имя или с интересующим тегом. буфер ограничен 100Мб,
  при превышении посылки не принимаются. от одного узла за 20 мин принимается не
  больше 10Мб. в посылке указано время начала раздачи, чтобы обеспечить анонимность.
  для избежания спама посылка должна содержать открытый ключ (с панхэшем) и подпись
  посылки на этом ключе. рассылка только с доверенных ключей, либо с ключей, не
  находящихся в списках штрафников. ещё можно шифровать посылку отмычкой, а отмычку
  публиковать в анонимных объявлениях
- функция поиска: auto, person, file, ... all. пусть N - число пробелов, тогда
  auto: N=1 - person, N=0 - person(фам),city, N>1 - file,article
  person: Pos = N trunc 2, до Pos - имя, остальное - фам.
  all: ищет по всем базам, перечисленным в параметре "all_search_bases",
  разбор по пробелам для каждого типа записи свой, иначе задавать параметры маской вида:
  {:firstname=>'Вас*',lastname=>'Пупкин'}
- база "эскизы" хранит: панхэш записи, размер эскиза (100x50) и тело картинки
- блок для подписи содержит: данные, подписанта, оценку, время, соль
- секретный ключ, шифруя пароль с помощью комбинации bcrypt, scrypt, rmd, sha2, bt
? кнопка "шифрую" в любой записи, после чего она хранится шифрованной
+ добавить галочку "в архиве" у каждой записи
- добавить флаг "заморожена", при включении не отдавать запись вовне
+ запрещать авторизовать ключ без персоны, на которую он сгенерирован
- не разрешать удалять/изменять персону, пока на неё есть приватный ключ,
  тем более, если ключ сейчас активен; лучше переносить ориганал
  в архив, а в журнале создавать копию


2. ГРАФИЧЕСКИЙ ИНТЕРФЕЙС

!- баг: если кабинет для некоего панхэша открыт, а самой записи нет, то рассылать
  запрос на эту запись: сначала тому, кто прислал панхэш, а потом у всей сети
  через массовое сообщение
!- баг: при получении очередного сообщения, окно перепрыгивает, даже если человек
  набирает в этот момент сообщение
!- баг: на радаре куча повторных записей
!- баг: у некоторых ругается "Пришло личное сообщение, но не могу открыть диалог"
- баг: народ с ходу не может понять, чем отличается "чат" от "диалога"
- в диалоге добавить кнопку оценки: ключа, человека, узла
+ включение связи "публикую"
+ при выбре другого файла, менять заголовок, если пустой или не был изменён
= диалог с капчой должен закрыться при рассоединении, если был открыт автоматом,
  над полем ввода сделать галочку "оставить диалог"
= в свёрнутом режиме или при отсутствии юзера на запрос капчи делать отбой,
  а лучше сообщать об отсутствии юзера и/или свернутости заранее в "hello"
- индикация обмена файлами: число и проценты в статусе, при щелчке подробная таблица
+ добавить галку "слежу"
+ при подписывании включать "храню", при публикации - "ручаюсь"
+ добавить звуки: подключился, отключился
+ в окне "статья" три вкладки: вид, вики/код, голый текст/байт-редактор
+ осмысленные имена у вкладок диалогов: а) имя; б) имя ф.; в) фамилия и.;
  г) имяN; д) панхэш[3:1,6:2]
+ при запуске программы, если уже открыта эта база, то активизировать ту программу,
  а эту закрывать
+ при генерации ключа выводить форму ввода человека, если нет людей,
  если есть - предлагать список, но при этом чтобы можно было вводить нового
+ при охоте выводить форму ввода узла, если нет узлов
+ сделать виджет для ввода координаты в виде "широта/долгота"
+ звуковое уведомление
+ другая иконка, если есть соединения
+ время в логе внизу, время на экране pangate
+ сохранение сообщений при получении на панхэш ключа и/или человека, при открытии
  диалога подгружать историю
+ интерактивное обновление таблиц: а) при изменении баз перебирать открытые таблицы
  и если найдена соответствующая - обновлять, б) при изменении базы ставить флаг
  базы "изменена" и общий флаг "есть изменения", шедулер по флагам обновляет
  таблицы и сбрасывает флаги, в) комбинированный: при изм. базы находить таблицы
  и ставить им флаги "нужно обновить", а затем шедулер сбрасывает и обновляет
  (сначала сбрасывает общий флаг). после обновления таблицы курсор и положение
  движка восстанавливаются
!- собеседник видит поддерживаемые вашей стороной аудио и видео кодеки (в виде списка).
  список передаётся при: а) инициализации соединения, б) посыле первого месcаджа,
  в) открытии диалога. нужно подумать
+ выбор языка при редактировании записи, по умолчанию - текущий. список языков брать
  из таблицы "Языки"
= wyziwyg-редактор статей: визуальный режим, режим тегов. написать ф-ю преобразования
+ подсветка кода (pandora.rb например)
= в каждом окне вкладка "Служебное": язык, панхэш, автор, флаги "отправлено", "изменено"
= работа с подписями: создание, проверка. проверять подписи при получении, ставить
  галку "сверено"
- вкладка "игра" открывается кнопкой из окна "диалог", или командой из списка
- "обязательно сверяйте ключ по телефону! отзывайте доверие, если ключ не прошел сверку!"
  "сверка": тип (ключ, хэш256, хэш384..), длина (6), позиция (случайно, 1,2..)
  возможно стоит разрешить голосовую сверку после капчи (с предварительным запросом)
  с записью разговора
- генерация "отмычек" для каждого новичка, они хранятся в базе "отмычки" и диктуются
  для расшифровки ключа сделать настройку: "для новых запрашивать шифрованный ключ
  на случайной отмычке"
= настройки кодеков и конвейеров. видеокодеки: vp8, theora, jpeg, smoke, x264,
  h264, vp9, аудиокодеки speex, vorbis, opus, mulaw,
  параметры: источники (win, lin), кодеки, входные и выходные конвейеры,
  в окне "диалог" возможность выбирать кодеки передачи, а также и контейнер
  при записи в файл
- универсальная форма печати любой записи в форматах A4, A3 и т.д.
- отчеты в формате BBCODE/GFM, логика их расчета в отдельных модулях
+ публикация в виде: 1) поле "публикатор", "дата" у записи; 2) связь "опубликовал"
  связь "публикую" содержит значение: (255-диапазон)..255 = (255-20)..255, 235..255.
= сделать кнопку "переводы" в статус-строке, чтобы выделялась, когда есть непереведенное
  для текущего языка. автоматически сохранять языковые файлы как публичные и
  распространять внутри сети
= цвет вкладки: узлы отключены, подключены всё, подключены не все, получено сообщение,
  есть голос/видео, состояние значка в трее аналогично
+ в списке "узлы" возможность отображать узлы из базы, или узлы из памяти
  (реализовано отдельным окном - "Сессии")
= в каждом списке возможность настраивать фильтры, сортировку и колонки
= выбор панхэша во всплывающем окне со списком объектов,
  есть фильтр, сортировка, поиск. чаще всего выбор панхэша ограничен потомками одного
  типа объектов, но иногда это может быть группа, или даже все типы (связь)
- возможен интерактивный поиск - при вводе текста в таблице, сразу переход
- интерактивность возможна как в таблице (списке), так и на панели в отдельном поле
+ наличие фильтра в списке объектов и его использование при: выборе панхэша, в доп.
  вкладках при вводе
- адекватные виджеты в фильтре (ширина, многострочность, маски ввода)
= возможен интерктивный фильтр - ".." сразу фильтруется
- сортировка по заголовкам основной таблицы, а порядок меняется порядком столбцов
- возможность генерировать симметричные ключи: а) в самом окне ввода; б) отдельной
  функцией?
- для доверенных (>0.5) кнопка "вызов" в диалоге, при этом проигрывается заданный
  муз. файл для доверенных их звук (>0.6) и видео (>0.7) без подтверждения,
  для остальных - с подтверждением
- для особо доверенных даже можно мою исходящую камеру (=1.0) и звук (>0.95)
  разрешать самим включать,
  но для этого должна быть нажата специальная кнопка "можно слушать супердоверенным",
  также перед включением прослушки/просмотра проигрываются отдельны(й,е)
  файл(ы) (или "вызов"), возможно робот прогаваривает "вас просматривает/прослушивает
  два-эф-пять-три-цэ" (панхэш)
- сразу после подключения собеседник видит, что ему можно (появляются нужные галочки
  и кнопки)
- если слушатель включен, то охоту, сделав раз, можно делать или реже, или вообще
  приостанавливать
- при вводе узла порт по умолчанию 5577, default=5577 лучше сделать в base.xml
- у объекта "Сообщество" и его потомков галочка "вступить ручаясь" с ползунком,
  которая создает связь подписанную заданным уровнем доверия
- отдельная вкладка у записи "Структура", там поле "формат" (json,xml,pson-base64)
  и поле "сравнить с", в котором задается другая подобная запись и показывается
  результат сравнения (в виде diff)
- у записей "Created" будет галка "инкогнито", при ее включении, поле "creator"
  забивается нулями. тем не менее функции подписывания сохраняются - автор как
  бы подписывает анонимную запись, а не свою, это нужно, когда
  автор не заинтересован в распространении своего авторства. при это на узлах может
  стоять запрет в принятии анонимных записей, об этом сообщается при инициализации
  соединения. если узел проигнорил это требование и начал пулять анонимные записи
  (с "creator"=0), то собеседеник применяет санкции (бан)
- при создании доверия ниже 0.0 справедливо требовать "мнени(е,я)", и говорить
  об этом в приветствии, если нарушено (прислал отрицательную ЭЦП без подписанного
  мнения) - бан. отриц. ЭЦП+мнение принимать и записывать как одно целое: в одном
  сегменте (?) и в одной транзакции
+ в статус строке иконки (серые, когда не активны) + появляющийся рядом при
  необходимости текст
- установка teredo: для линукса ставить через "apt-get install miredo", для
  винды прописать: "netsh interface teredo set state type=client"
= при наличии непрочитанных сообщений дать возможность открыть диалоги одним
  щелчком по трею, снимать статус "есть непрочитаннынные" только когда всё прочитано
- сделать счетчик трафика в стутус строке: "принято/отправлено". обновлять раз в
  секунду по таймеру, таймер активировать из send_comm_and_buf через Gtk::Timeout,
  при этом запускать, только если не запущен, объект таймера не обязательно должен
  перезапускаться, достаточно ставить флаг о незакрытии таймера. если в течение 30
  секунд не было данных и флаг не установлен, то объект таймера завершается.
  новый таймер запускается только если приращение данных больше 5кб
- при генерации очередного ключа, помещать его панхэш в параметр "unsaved_keys".
  если пришла положительная подпись ключа, и ключ не был сохранен, то зажигать желтую
  кнопку в статусбаре: "сохранить ключ". при нажатии на неё предлагать диалог
  сохранения, после сохранения удалять из параметра "unsaved_keys" панхэш ключа,
  чтоб больше не предлагал и скрывать кнопку. при пустом "unsaved_keys" за
  приходящими подписями ключей не следить
+ открывать диалог ввода новой записи при открытии пустого списка панхэшей
= при авторизации, если ключа нет, предлагать выбрать из списка закрытых ассиметричных
  ключей, если список пуст предлагать загрузку из файла или генерацию
= динамически формируемый список иконок панобъектов для разных размеров (menu,
  toolbar и т.д.)
- при поступлении новых записей формируются аннонсы в базе события, в них перечислены
  панхэши новинок, при наличии новых событий в статус строке новостной уведомитель
  показывает число новых непросмотренных записей, после прочтения/просмотра записи
  панхэш ставится признак "панхэш прочитан", если в анонсе все панхэши прочитаны,
  то анонс помечается как прочитанный. возможно стоит делать один анонс на один панхэш
- профиль пользователя: лента новостей с предварительным просмотром фотографий,
  с анонсами статей. фото могут: а) сразу загружаться полностью, б) сразу загружаться
  миниатюры, в) миниатюры загружаются при открытии ленты, а фото при полном просмотре,
  г) миниатюры сразу, а фото - при открытии ленты. возможно комбинирование способов
  в зависимости от доверия к пользователям - для пользователей с высоким доверием
  сразу и полностью загружать записи, а для пользователей с маленьким - только
  при щелчке в ленте
- "собеседник набирает", "отошел", сделать автоответчик для разных статусов
- пометки в чате у сообщения "получено/прочитано", передавать пометку другой стороне
- состояние "не активен", в этом случа сообщения не помечать как прочитанные, даже
  если окно активно
- сделать мастер по настройке месторасположения базы
- возможность отключать слежку для обратной стороны: "набираю", "прочитал",
  "активен", "отошел"
- отображение в профиле: аватар, И.Ф., ДР, город,
- события: создал (фотки, ), опубликовал (фотки, ), поручился (люди, ), связи
  (вступил в группу и т.д.). нужно ли: сообщения на стене, друзья, музыка, ролики,
  вопросы-ответы, интересы, цели, кого ищет, сообщества, надпоминания о ДР, новые
  товары, постановления, проекты, активность сообществ?
- поиск сделать в виде запросов. запрос содержит тип, данные и панхэш. запросы
  рассылаются. при получении запроса смотрится очередь свежих запосов, если
  есть - выдается оттуда, иначе поиск и запросы по цепочке доверия. ответ на
  запрос - анонсы. анонс содержит панхэши; краткие (описатаельные) данные: миниатюры,
  названия, часть текста и т.д.; владельцев этих данных: человек, ключ и узел
- анонсы приходят также при запросе новостей, в этом случае формирование анонсов
  определяется параметрами охоты (настройка почемучки) и параметрами узла (настройка
  ответчика)
- при нажатии Ctrl+C в буфер обмена вставляются выделенные записи в формате xml
  (json, pson), при нажатии Ctrl+V в текущую таблицу вставляются записи из буфера
  обмена в форматах xml, json или pson
= всплывающее уведомление в момент срабатывания задачи, единый шедулер с мусорщиком,
  в статус строке поле "задачи" в виде будильника с числом задач
- всеобщие вопрос-ответ каналы с заданными темами. канал идентифицируется по названию
  или/и по ключевым словам. задача: специалисты дают советы новичкам.
  сразу после установке в пандоре заданы два канала: linux, pandora.
  в любой момент новичок бросает в канал вопрос, вопрос расходится по сети и собирает
  ответы. также можно открыть канал и посмотреть последнюю активность, или сделать
  запрос по прошлым вопросам
- в профиле ссылки на объекты, которые просматривались, помечать как смотренные,
  для этого вести историю просмотров длинною в 2 недели в виде ссылки
  "человек"->смотрел->"объект"
- в диалоге поиска добавить кнопку "задать поля", по к-й показывать форму наподобе
  формы ввода, только с дополнительными переключателями у каждого поля "равно",
  "содержит", "начинается", также поддерживаются спец.символы * и ? только при
  флаге "равно"
- граф дерева доверия
- граф сети
- в статус строке уровень логирования: log1(err), log2(warn), log3(info),
  log4(trace)
- в статус строке дата и время. при подписи, если есть более новая, выдавать ошибку
- виртуальный собеседник, чтобы включать, когда нету, или пишут типа "привет.
  как дела?", можно наделить интеллектом, чтобы рылся в статьях, анализировал связи,
  компоновал осмысленные предложения (ответы, и может быть даже вопросы)
- многоступенчатый перевод с автоподгрузкой, например: ua->ru->en,
  ссылка на родителя идёт в файле переводе /lang/ua.txt: #!in_absence=ru,
  подгружать всю цепочку не сразу, а по мере необходимости
- в диалоге редактирования записи сделать кнопку-переключатель "редактирование",
  при её отключении показывать только "ОК" и "Отмена", при этом флаги доступны;
  также сделать "умные кнопки": при правке любого поля запускать 1-сек таймер,
  после его окончания, а также при уходе с поля, смотреть существующие записи,
  если запись с панхешем есть, то показывать "правка", если нет, то "новый".
  учитывать matter-поля - если правка не matter, то поиск по панхэшу не нужен
+ собственный виджет выбора даты, показывающий праздничные дни и намеченные задания
- на радаре показывать не только "массовиков", но и тех, кто подключен
+ в виджете Coord сделать кнопку с выбором города, чтоб координата из города бралась
= определять IP6 (и внешний IP4) - показывать их в интерфейсе при наведении в
  статус строке на кнопку "слушаю"
+ чекбоксы переделать в ToolButtonы
- на вкладке "Основное" блоб-поля замораживать, если на вкладке "Текст" заполнено
+ ограничить команды типа !echo только для доверенных, например от 0.5
- в диалоге показывать доверие другой стороны, брать по имеющейся подписи,
  уточнять прямым сетевым запросом
- сделать окно для отображения сообщений из всех чатов (и броадкаста)
- кнопка на радаре - приём всех чат-сообщений или только от подписанных
- кнопка на радаре - задать уровень доверия для приёма массовых сообщений
- у радара сделать ограничение в 200 строк, если превышает, то доверенных втискивать
  в соответствующее место, а нижних выталкивать
+ в кабинете кнопки "чат", "мнения", "связи" и "подписи" сделать в одну кнопку
+ при переключении в кабинете с вкладки на вкладку менять иконку таба кабинета
= адаптивный показ вкладок в кабинете, к примеру, скрывать с 2й для новой записи
- для новой записи заголовок кабинета показывать со звездочкой впереди: *Человек
- менять заголовок кабинета при изменении полей и сохранении записи, а также
  перезагружать все вкладки кабинета, начиная с чата и дальше
- в диалоге и чате фон у иконки "подпись" делать соответствующим значению подписи
- в кабинете у кнопки "основное" фон соответствуюет оценке, рядом стрелка для изменения
- в кабинете на вкладке "диалог" кнопка "ключ" с фоном оценки ключа, рядом стрелка
? в профиле сделать страницу с описанием объекта, для этого сделать связь и блоб
- при рассылке коробки указывать как слать: только луком или лук+массовка
- при рассылке коробки также: с подписью, с шифром, без шифра
- оценка людей по категориям. выполняется через связь Человек-Слово и делается
  подпись с оценкой этой связи. в профиле чела отображаются теги и суммарные
  оценки с учетом сети доверия
- редактор кода: выделение активной строки, курсор пожирнее
- сделать основные теги (h1, h2, b, i и т.д.) расширяемыми аттрибутами,
  например <h1 color=blue> сделает все заголовки синими, <h1 clear> сброс
- сделать именные теги, например <bold_blue weight=600 fg=#0000FF>
- теги link, img (font уже сделан) также сделать расширяемыми, но на 1 раз
- в кабинете кнопку "сохранить" активировать только при новой/изм записи,
  при этом кнопка "ок" тоже должна становится более яркая
- при сохранении в кабинете посылать сообщение "сохранено" в лог
- сообщения в логе помечаются разными иконками, "сохранено" - дискеткой
- при появлении новых лог-сообщений мигать иконкой лотка
- при оформлении заказа вверху показывать галку "учитывать остатки на <дату>",
  если галка включена (по умолчанию так), то указанным в коде заказа
  самым свежим найденым в сети файлом подтягиваются последние остатки,
  и ограничения полей ввода отображаются с учётом остатков.
  если юзер отключил галку, то видны все блага и их поля, по максимуму


3. СЕТЬ

!- баг: сбрасывать бит "архивный" с человека при его оживлении
!- баг: свежие записи сливаются, даже если человек их не публиковал
!- баг: при подключении узла, кроме поля "адрес" зачем-то заполняется и "домен"
+ баг: при охоте пытается подключаться к ip6-адресам, хотя ip6 не активирован
= баг: хотя соединение установлено, при охоте снова пытается подключиться,
  и та сторона пишет "Двойное подключение недопустимо"
+ баг: если соединение разорвалось, то сессия на другой стороне висит и не даёт
  снова подключиться, пишет "Двойное подключение недопустимо"
+ при закрытых диалогах и бездействии 1 мин - рассоединяться
+ сделать по умолчанию охоту каждые 5 минут
+ сообщения, шифрованные сообщения
+ сеансовый ключ, создается при сеансе связи, прикрепляется к ключу собеседника,
  шифруется на симметричном ключе для локальных данных, панхэш которого также
  записывается в тело. или возможно сеансовый ключ генерится для каждой отдельной сессии
!- работа с каналами (медиа, игра): запуск, пауза, останов, закрытие
!= добавить сессии признак "постоянная" (диалог, шлюз), если включен, агрессивно
  восстанавливать соединение охотой или рыбалкой, если в этот момент "всплыла" сессия с
  таким же keyhash/base_id, то переключать диалоги и рыбаков на неё (возможно, что-то
  еще). возможно наоборот: при подключении дублирующей сессии, перекидывать её на
  отпавшую - надо подумать
!- бан-лист ip в памяти, штрафовать если:
  1) подключился и отключился без трафика - 1 мин
  2) подключился, отправил хело, но не ответил на хэш-загадку - 2 мин
  3) прислал отгадку раньше срока - 30 сек
  4) прислал неверную отгадку - 10 мин
  5) прислал отгадку в срок и верную, но отключился, не прислав подписи - 2 мин
  6) прислал неверную подпись - 10 мин
  7) прислал неверную капчу, исчерпав все (2 по умочанию) попытки - 2 мин
  8) подключился повторно раньше чем через 5 мин, хотя был ответ "ключ на
  рассмотрении" - 5 мин
  9) при повторном нарушении сроки штрафов суммируются и удваиваются
  10) замолчал во время связи на этапе авторизации и не отвечает более 1 мин - 20 сек
  11) прислал неадекватный сегмент для текущей стадии - 5 мин
  12) авторизация с одного ip со вторым неизвестным ключом с интервалом
  менее 2 ч - 15 мин узлы-штрафники могут быть подписанны с отрицательным доверием и
  разойдутся как негодяи
  13) с одного ip может быть не более 2х неавторизованных сессий
  14) прислал файл длинной отличной от заявленной - 1 час
!- условия, исключающие хэш-загадку и капчу (но не исключающие подпись):
  1) ip есть в базе узлов и помечен как статический
  2) есть в ram-списке недавно авторизованных узлов
  такие узлы не подвергаются мелким штрафам, но сумма штрафа накапливается, а при
  достижении 30 мин узел банится и низвергается до обычного (с хэш-загадкой и капчой)
- лимит свободных подключений равен 100, если больше, то разрешать только тем,
  у кого в приветствии знакомый keyhash, или у кого IP из списка доверенных узлов,
  или если IP из соседней зоны (x.x.x.x/24) от доверенных. Для этого по разрешённым
  узлам строится область доверенных адресов
= пустой цикл/проверка живости
- симметричный ключ для шифрования локальных данных (сообщений) зашифрован на
  ассиметричном, создаётся автоматически при необходимости, хранится в отдельном личном
  параметре
= всего 3 типа ключа: 1) открытый, тело содержит только ключ, 2) закрытый паролем,
  тело содержит IV и шифроблок, 3) локальный или сеансовый (шифрован на другом),
  тело содержит панхэш ключа и шифроблок
- возможны пять видов подключения:
  1) первичное, для полноценного обмена (прямое соединение, или линия)
  при этом могут существовать публичные узлы, поддерживающие отдачу публичных данных
  (например, энциклопедических статей или анкет исторических деятелей) без авторизации
  2) вторичное встречное, для проверки обратного адреса и порта (если новый, или
  изменились)
  3) упрощенная авторизация, чтобы другие оставляли текстовые сообщения (без авторизации,
  но с капчой)
  4) веб-морда на отдельном порту для самого себя, чтобы удаленно управлять своим узлом
  5) возможно, на отдельном порту сервис xmpp
  упрощенные узлы могут работать в качестве шлюзов текстовых сообщений
= инициализация сеанса: в приветствии "кто"-"кому". если неизвестен ip, "кто" или "кому",
  то задается хэш-задачка, также неизвестным задается капча, и всем задается подписать
  фразу. для хэш-задачки высылается фраза размером 256 байт, где последним байтом
  задается размер пар бит N загадки с начала фразы, а предпоследним - число секунд M.
  отгадка - это фраза, плюс некоторое число любых байт найденых перебором так, чтобы
  первые N пар бит хэша sha256 от отгадки совпали с загадкой. если охотник нашел отгадку,
  то спустя M секунд пересылает "добавку" слушателю, если прислал позже или равно M
  секунд, то слушатель добавляет её к фразе и берет хэш, если совпало, идет дальше
  (запрашивает подпись), инчае банится на 15 минут. также охотник банится на 3 минуты,
  если отключился без ответа на загадку. банлист динамический (в RAM) и набирает
  штрафные баллы увеличивая время бана при повторных косяках. хэш-задачка может быть:
  отключена, включена для неизвестных ключей (по умолчанию), включена для всех
  эта же фраза используется для подписания. но подписывается не сама фраза, а хэш384
  от нее, что предотвращает подсовывание на подпись осмысленных данных. капча задается
  уже после подписания, если ключ без доверия, после чего ключ помещается в "отстойник".
  если капча пришла, то ключ переводится на подтверждение, когда доверие установлено
  (ключ подтвержден), тогда возможен полноценный обмен. до авторизации с доверием узлы
  находятся в списке по "ip, port", после - в списке "key, base_id". до полноценной
  авторизации другие подключения с данного "ip" блокируются/ограничиваются
= защита от ддоса: объем пакетов до авторизации ограничен 1200 байт, число шагов не
  более 5, объем трафика от неавторизованных узлов не более 3*(1200*5)байт/час, если
  нарушил - бан на сутки
= приоритет отдачи данных: сообщения, (игра,) звук, видео, записи
- если есть потери, снижать нагрузку: замедлять записи почемучки и ответчика,
  снижать качество видео, аудио
- прострел NATов через: UPnP (IGD?) - for local, NAT-PMP, STUN, SOCKS, NAT-T (in IKE),
  TURN, RSIP, MIDCOM, ICE, Teredo(miredo), SBC, SYN-TCP, UDP-pounching, ALG
  1) дырявление UDP аналогично Skype (встречный перебор портов)
  2) через STUN-сервис: узнаем типы NATов, и разумно долбим
  3) с пробитием через SYN-TCP
  4) TURN?
  5) туннель через открытый узел
  6) взаимное лобовое UDP-пробитие (то же самое что п.1?)
  7) NAT-PMP (в рамках Bonjour)
  8) IGD (в рамках UPnP)
  9) ICM (расширение к STUN+TURN)
  10) NAT-T (IKE)
  11) RSIP (эксперементальный протокол и навесок к NAT)
  12) SOCKS
  13) Teredo (для IP6)
- шифровать закрытый ключ алгоритмом AESом на паре p/q, созданной из располовиненого
  блока: хэш384(xor146(пахэш юзера+хэш256(rot13(дата создания+(хэш256 пароля)))),
  использовать xor-наложение одной половины каждого значения на другое, чтобы
  перемешать данные. в этом случае: а) атака через радужные таблицы потеряет смысл;
  б) время перебора заметно удлинится; в) исходные пароль аналитически не вычисляем.
- подпись на хэш384 для ключа и хэш256 для остальных записей
= !сеанс связи: приветствие, капча (открывается в диалоге, даётся 5 мин, 3 попытки),
  запрос ключа/персоны, ключ принимается в состоянии "закодирован" и ждет подписания
  (доверия), до того как ключ раскодирован/сверен сеансы связи обрываются,
  после - возможны. для прошедших капчу доверие 0.01 (настраивается), для слушателей
  по умолчанию доверие тоже 0.01. возможно, после прохождения капчи, у ключа ставится
  метка "captched", и в дальнейшем повторно не требует капчу
- должны быть обязательные поля у каждой записи (require=1), иначе не принимается узлами
- первый байт в сегменте случайный, остальные xor-ятся на нём, чтобы предотварить
  фильтрацию приветствие закодированно, нет служебных слов
- для защиты от фильтрации трафика пандора может имитировать различные виды соединений:
  http, https, smtp, pop, ftp и так. далее. первые команды фейковые, а рабочий трафик
  передается в виде блоба
- записи, размером значительно больше сегмента, могут запрашиваться в режиме
  распределенного сбора - жатвы. вначале жнец формирует карту сбора, затем добавляет
  задание "жатва" и создает массовую рассылку запросов (панхэша записи) на жатву,
  после получения ответов, жнец создает список кустов, после чего приступет к
  запросу и сбору семян (порций данных с заданным смещением и размером). несобранная
  запись помечается флагом "собирается", при этом сразу ставится нормальный панхэш.
  такие записи не подлежат открытию или передаче другим узлам до тех пор, пока запись
  не будет полностью получена и флаг "собирается" снимется.
- задания на рыбалку, жатву и поиск собираются в списке "Пандора-Задания". при
  подключении любого узла почемучка передает ему задания. задания снимаются после
  выполнения (или для поиска и рыбалки удаляются сборщиком мусора по истечении срока).
  также задания на рыбалку удаляются, если рыбак-инициатор в отключке больше
  заданного срока
- если не открыты медиа-каналы, или нет обмена данными, то в циклы чтения и записи
  добавить sleep 0.1
- у узла счетчик заходов с одного узла увеличивается при переподключении с одного адреса.
  если число превысило 20, или 5, если предыдущее было вчера или позднее, то считается,
  что это статика, при этом ставится флаг "статический" и предпринимается попытка
  подключиться на этот адрес на порт 5577, если подключился и ключ ответил, то
  выставляется хост-адрес
- в приветствии передавать маску разрешений, состоящую из 16 пар бит: 0 - не
  поддерживаю, 1-желательно, 2-требую, 3-имеет приоритет над другими подобными
  разрешениями. разрешения: 1) рыбалка 2) шифрование BF 3) шифрование AES
  4) rot13 5) zip 6) шифрование видео 7) шифрование аудио. остальные пары бит
  зарезервированы на будущее
- если после того как пропал пакет пришло больше 70 пакетов или прошло больше 1 сек,
  то запрашивать повтор ECC_Sync_Repeat. если чз 3 сек или 100 пакетов так и не пришло,
  ECC_Sync_CriticalRepeat. если еще чз 3 сек и 110 пакетов, то разрыв. отправитель
  повторяет только пакет при Repeat, а при Critical останавливает очередь нумерованных
  и снижает медиа-отдачу
= гарантированная доставка сообщений
- контроль онлайн, переподключение при обрыве
- ввести срочность сегментов, не срочные ждут (2 сек) следующих, чтобы скомпоноваться
  с ними в пакет, например, несрочные сегменты будут прилепляться к сегменту sync
- сделать перецеп сессии на сокет, если была связь через рыбалку
- висеть на 5 узлах с самым высоким доверием (или по другому критерию, например по вх.
  трафику)
- если достигнут лимит открытых соединений (сессий), то отрубать сессию на завершение,
  которая: а) дольше всего висит; б) имеет минимальное доверие
- отвечать доверенным на запросы о наличии активности на моём узле
- при входящем подключении, после авторизации смотреть, нет ли "подвисшей сессии",
  если есть, прицеплять сокет к ней, а эту сессию закрыть. возможно нужен признак
  восстановления сессии. если оба встречно подключились, то рыбака побеждает прямое
  подключение. если оба прямых, то побеждает (возможно) тот, кто изначально инициировал
  соединение
- если есть несколько каналов передачи, то сформированные пакеты отправляются в те
  каналы, по которым скорость передачи максимальна
- если скорость канала еще не определена, то задается средний уровень передачи
- на выбор канала также влияют лимиты трафика и скорости, которые озвучиваются в
  приветствии
- анализатор скорости интегрирует объем трафика и отслеживает время, также следит за
  уровнем потерь и за задержками. итого высчитывает три величины: скорость, задержка,
  объем
- задержка определяется по реакции на sync-пакеты
- если адресат недоступен, то сообщения хранятся на общих узлах с доверием более 0.5.
  при подключении, посредники стравливают ему мессаги. так появляется возможность
  офф-лайн сообщений
- биржа для проверки истиности рассылает по цепочкам доверия запрос на панхэш подписи,
  в ответ получает хэш записи (или саму запись, если сумма больше 10ГДж) и сверяет
- в приветствие добавить: версия, размеры/хэши файлов pandora.rb и 01-base.xml
- после авторизации добавить сравнение списка описания объектов, особенно формул
  панхэша, при расхождении полей или панхэшей ставить блокировки на эти типы записей,
  возможно, проверку инициировать только при рассогласовании панхэшей в момент обмена
  записями - проверку только данного типа или всего списка
- узел может работать в режиме крипто-станции: хранит секретные ключи, принимает
  записи от авторизованных узлов и делает для них ЭЦП и шифроблоки, ведёт историю
- вести список панхэшей запрашиваемых записей, искать их, при этом подмораживать
  процессы, требующие эти записи. при получении записи высылать процессам уведомление
- чаты организовать вокруг сообществ, добавление в чат - отдельная связь
- узнать автора до получения записи невозможно, также как и узнать ключ, до
  получения подписи. поэтому для отсеивания забаненных два пути: 1) высылать доверие
  ответчику и "просить" его пропускать низкодоверенных, 2) получать запись/подпись и
  сразу переводить в удалённые, 3) при запросе высылать список забаненных.
  первый способ хорош для друзей, второй для случайных узлов (при поиске).
  первое также означает, что обмен доверием к людям и ключам должен идти вначале,
  при этом достаточно пересылать подписи, без пересылки анкет и ключей (для конфидента)
- перед обменом каким-либо типом записи, формула панхэша должна быть единожды за
  сессию согласована. для этого одна из сторон (всегда слушатель?) генерирует случайную
  запись, шлёт другой стороне, а та должна ответить панхэшем. первая сторона тоже
  вычисляет панхэш, если совпали - значит, данный тип согласован
- перед запросом по панхэшу, другой стороне передаётся формула панхэша; если
  формулы сторон расходятся, то обе стороны помечают такие типы записей как
  необмениваемые, и по ним обмен не происходит. если среди таких типов есть
  критичные (человек, ключ, подпись), то сеанс связи разрывается
- при обмене записями передаётся также панхэш, если принятый панхэш расходится с
  вычисленным, то запись отбраковывается, а другой стороне выдаётся предупреждение.
  если число предупреждений достигло 5, то сеанс разрывается с временным баном
+ регистрация слушателя на http[s] (reg_host=http://robux.biz/panreg.php),
  при (com=add&ip=<ip4|ip6>&nodehash=a1b2c3) возвращает полный список,
  при (com=del&ip=<ip4|ip6>&nodehash=a1b2c3) удаляет себя из списка,
  спустя 2 часа каждый ip адрес удаляется
- pangate должен уметь глядеть в этот список, дополнять и по запросу возвращать
- разные уровни обслуживания: до авторизации, по паролю, по капче, по ключу;
  на каждом уровне свой набор возможностей, который сообщается маской битов
- лимиты на открытое число соединений и сессий
+ если вызывался PanReg, то при выходе вызывать с параметром "delete=1"
= сделать broadcast-чат через отдельный тип массового сообщения
- по массовым сообщениям строить таблицу маршрутизации (цепочки), при рыбалке
  использовать её для быстрого соединения. если запрос на рыбацкую линию где-то
  не дошел (ответили что нет цепочки, или не ответили 20 секунд), то продолжить
  рассылку массовых сообщений типа "рыбалка"
? при рассылке массового запроса на запись учитывать, приходил ли
  уже запрос на эту запись от узла, которому вы собираетесь выслать запрос,
  если приходил, то делать ему запрос скорей всего не нужно


4. ШЛЮЗ И РЕГИСТРАТОР (PanGate и PanReg)

+ файл настоек у pangate: ключ, пароль, хост, порт и т.д.
= пандора-шлюзы существуют для "сбора" соединений на подключившегося "владельца",
  могут быть написаны на других ЯП (питоне, пхп), запускаются на хостах с ip доступными
  извне, например, на узлах хостеров. шлюзы имеют упрощенную авторизацию для владельца и
  просто перенаправляют трафик с подключившихся пиров на владельца в формате "линия".
  при этом шлюз может иметь примитивную фильтрацию трафика, например, при попытке
  передать видео или превышении лимита, олиниять охотников
- шлюз утверждает рыбака в списке после того, как он прошел авторизацию на
  владельце/владельцах или на уже утвержденных рыбаках. после утверждения шлюз
  возвращает ip тем, кто запрашивает по панхэшу. утверждение рыбака сохраняется до
  его отключения
+ владелец авторизуется на шлюзе используя пароль
- владелец может авторизоваться по ключу, открытый ключ хранится в отдельной папке
  в формате, например, PSON или Base64
- шлюз передаёт рыбке ip рыбака в приветствии
- шлюз записывает открытые ключи пиров и доверие от владельца, если владелец подтвердил,
  в дальнейшем пиры с этими ключами могут пользоваться шлюзом без владельца онлайн
- в настройках задаются квоты на объем и тип трафика для: владелец-пир,
  доверенный пир-пир, и недоверенные пир-пир (для общественного шлюза)
- связать шлюз и регистратор - базу активных узлов сделать общей
- добавить ник в регистратор


5. РЫБАЛКА

!= линия реализуется типом сегментов lure (наживка) и bite (поклёвка). узел-инициатор
  запрашивает у посредника ключ-цель, при этом указывает, допускает ли он рыбалку
  или нет. если ключ-цель на данном узле не активирован, и рыбалка допустима,
  узел-посредник (шлюз или "хозяин пруда") ищет на каких узлах пасется ключ-цель и
  запрашивает к ним подключение линии от рыбака. если узел-цель (рыбка) принял "рыбалку",
  то узел-посредник регистрирует номер линии на рыбака, и рассылает рыбаку и рыбке
  подтверждение о линии, а также ограничения (допустимые типы сегментов, скорость
  обмена, лимит трафика) после чего рыбак и рыбка начинают обмен в линии через
  сегменты: lure/bite:[number]. управление линией ведется через сегмент
  channel:[line/codes]. при этом рыбак и рыбка должны союлюдать требования посредника
  (не слать запретные сегменты, не превышать лимиты). узел-посредник может вмешаться
  в обмен рыбака и рыбки, если увидит недопустимые сегменты, превышение трафика
  и т.д., в этом случае посредник может наказать нарушителя баном. рыбалка штатно
  завершается, если рыбак или рыбка запросил закрытие линии, или кто-то из них
  отключился. рыбалка может быть прозрачной для рыбака, т.е. рыбак может и не знать,
  что подключился к шлюзу, такой режим работы естественнен для шлюзов, но не характерен
  для узлов-посредников. чтобы рыбак умышленно не забивал очередь шлюза, пропуская пакет,
  можно ограничивать очередь для неавторизованных рыбаков (например до 3х сегментов),
  и расширять её для авторизованных (до 30)
= проброс соединений: охотник A запрашивает у слушателя B проброс на узел C.
  если C подключен, ему сообщается
  если C отключен, но слушает, к нему подключается
  если C отключен и не отзывается, A запрашивает у B "рыбалку" узла C
  вопрос B рыбаку A: будет ждать (10 мин макс) или периодически подключаться (каждую 1
  мин)?
  если A ждет - он висячий рыбак
  если A периодически опрашивает - он прыгающий рыбак
  если C подключился к B, то B сообщает C что на него идет рыбалка от A, далее одно из
  трёх:
  * C подключается к узлу A напрямую при встречном простреле NATов
  * начинается разговор между A и C через B, если еще A висит
  * узел B даёт узлу C время на встречную висячую рыбалку узла A (10 минут), если A
  прыгающий. если прыгающий A появился за это время, их соединяют, если нет - оба рыбака
  снимаются с рыбалки. рыбаки снимаются с рыбалки также по таймауту (10 мин)
  на узле B задается максимальное число заявок на рыбалку, например 500
  кроме того задается максимальное число подключенных рыбаков, например 20
  в заявке на рыбалку может фигурировать не только узел, но и панхеш человека или ключа
  узел B может задавать ограничения на объем трафика в ед. времени или запретить
  медиа-обмен
  Узел B может задать ограничения на типы сегментов: прострел, сообщения и т.п.
  Также B может требовать шифрование только на ключе B, нераспознанные сегменты могут
  быть запрещены.
  Рыбалка может быть многоуровневой: A спросил C у B, B переправил заявку D, E, F и т.д.
  Примитивные посредники могут быть написаны на php, python, C и т.п., и работать на
  хостинге.
- на каждом узле есть пруд (pool), его функции: 1) искать клиентов с заданным
  цель-ключом (при необходимости подключаться); 2) запрашивать у них линии для заданных
  рыбак-ключей; 3) пересылать данные между рыбаками. рыбалка может быть явная,
  когда узел-рыбак запрашивает цель, а может быть неявная, когда узел, думает, что
  шлюз и есть истинная цель. при неявной рыбалке развитие событий по двум путям:
  а) узлу сообщается, что для него открыта линия; б) с узлом ассоциируется линия,
  но ему не сообщается. неявная рыбалка по-умолчанию начинается автоматически,
  если узел в качестве цели указал чужой ключ (не текущего держателя узла). рыбки
  регистрируются специальным типом связи: ключ-пришел_с-узел. в дальнейшем, если
  прямое соедние не удалось, рыбалка организуется через эти связи.
  рыбак - узел, который запрашивает связь с ключом, не активированном на держателе.
  рыбка - узел, который находится прудом среди активных соединений, или который
  активировал сам пруд по заданному запросу. программно, пруд - это отдельный поток
  (thread), который принимает данные от активных соединений и распределяет их по
  буферам отправки нужных соединений. отправкой буферов занимается уже поток отправки
  соединения. при этом нумерацией сегментов занимаются сами соединения при извлечении
  данных их буфера отправки и их отправлении. уже отправленные сегменты хранятся в
  одельной очереди отправленных сегментов для коррекции потерь
- полное отслеживание цепочки узлов
- пользователи: аноны, виртуалы, реалы, псевдонимы, бутафоры
- полноценный узел поддерживает все функции pangate
- при невозможности встречного подключения сообщать собеседнику и при его просьбе
  и возможности "держать" его на линии как висячего рыбака
= добавить возможность тунелирования. из диалога запрашивать прослушку заданного
  tcp порта у собеседника и пробрасывать трафик с него к себе на заданный порт.
  при этом собеседнику разрешается изменить номер порта. также сделать проброс вне
  диалога. аналогично, слушать у себя заданный порт и пересылать трафик на
  порт [и адрес] у собеседника. реализовать чере кнопку "тунель" в диалоге,
  а также Задание "тунелирование". в задании указывать направление и параметры:
  1) слушать здесь адрес, порт; перенаправить туда адрес, порт
  2) слушать там адрес, порт; перенаправить сюда адрес, порт.
  на каждое новое соединение к порту открывать отдельный канал, т.о. число каналов
  ограничено 255


6. ШЕДУЛЕР

+ сборщик мусора запускается чз 10 мин после старта и подчищает "тухлятину": у чего
  вышел срок 5 дней и не были оказаны поддержка или доверие. подчищаются без поддержки
  чз 5 дней, или поддерживаемые с доверием меньше -0.5. сборщик работает неспеша,
  засыпает на 1 сек после каждой операции, а если есть медиа-обмен, то замораживается.
  при сворачивании или бездействии интервал сокращается до 0.3 сек, при отсутствии
  соединений до 0.2, а при выключенном слушателе до 0.1 сек. 5 дней могут быть и
  больше для записей от доверенных создателей. если запись пролежала без
  поддержки 5 дней после modified, то сначала мусорщик помечает её как удаленную,
  скрывая из вида пользователя, а спустя 3 месяца полностью удаляет запись.
  если пришла связь по удаленной записи (лайк, публикация и т.д.) или подпись,
  то запись "восстанавливается" из удаленных. возможно, не восстанавливается,
  но её данные используются в ленте новостей для
- для ограниченных баз (например, эскизы) работает ступенями с повышением доверия
  до тех пор, пока размер базы не понизится до заданного лимита
- мусорщик также чистит битые связи и повисшие подписи - на записи,
  которых уже не существует
- при удалении записи мусорщик может (но не обязан) удалить и связи с подписью
= при активности пользователя раз в 30 минут вызывать PanReg


7. ПОЧЕМУЧКА И ОТВЕТЧИК

!- при нажатии "Охота", если подсоединено, и почемучка не работает, то ставить
  шаг почемучки на начало
!= запись при обмене
  +1) запрос и запись ключа до авторизации (в память?)
  +2) запись/обновление узла (и ключа?) после авторизации
  +3) запрос и запись анкеты (если ключ доверен)
  =4) установление связи "пришел с", если рыбалка (а также отдельный узел?)
  +5) запрос новостей, запрос других записей и их запись
= как общаются почемучка и ответчик:
  1) узлы обмениваются последним временем. минимум вычисляется из: а) времени
  предыдущей связи, б) времени препоследней полученной записи, в) полученного
  последнего времени
  2) узлы шлют связи "я слежу", "я игнорю" (по своим интервалам времени), сначала
  список панхэшей, затем сами записи
  3) почемучка задаёт типы записей и время с которого начать (и закончить)
  4) ответчик смотрит: а) связи "я публикую", "он следит", "он игнорит", б) свои
  подписи, учитывая разрешённые сорта для данного уровня доверия к почемучке,
  составляет список панхэшей и высылает почемучке
  5) почемучка получив список, смотрит каких у него нет, и высылает список на запрос,
  но уже не панхэшей, а только их индексы в списке ответчика (байт, или слово)
  6) ответчик высылает записи по списку
  7) почемучка, получая записи, заглядывает в них и смотрит, какие ещё панхэши запросить,
  добавяет панхэши в список запроса
  8) когда ответчик заканчивает высылку, почемучка травит ему список вложенных панхэшей
  9) повторяются шаги 7-8, пока не иссякнут записи
  10) как только ответчик выговорился, почемучка запоминает время сеанса связи
  11) если включен "дозапрос старого=3 дня", то почемучка может запросить ещё старый
  интервал
= публичные записи предлагаются всем в рамках схемы доверия (или вобще всем,
  или отдельная схема для публичных записей). не публичные записи рассылаются
  по хитрому алгоритму. например записи рассылаются их создателям, если создатель
  имеет доверие выше 0.01. чужие записи рассылаются в зависимости от того доверия,
  которое имеет создатель записи к тому, кто ее запрашивает. возможны,
  дополнительные правила
= здание на охоту (в превом приближении) строится так:
  1) почемучка смотрит, какие записи он запрашивает у этого узла, это задается отдельным
  полем узла, или параметром в настройках для данного диапазона доверия
  2) почемучка берет время последнего запроса, вычисляет интервал с текущего времени,
  прибавляет 5 мин (запас, задается параметром в настройках), и делает запос ответчику
  3) ответчик вычисляет нижнюю границу, ищет записи и высылает панхэши почемучку,
  по его запросу ответчик может: а) слать повторы; б) не повторять записи после
  этого времени; в) слать, но в зависимости от доверия. т.е. для малодоверенных
  по 10 раз одно и то же не высылать, обойдутся. также ответчик может задавать
  свой "запас"
  4) в конце высылки данных, ответчик высылает код окончания передачи
  5) почемучка фиксирует время и шлет подтверждение. если почемучка доверенный,
  то ответчик фиксирует время только как получит подтверждение, а если малодоверенный,
  то фиксирует время не дожидаясь ответа почемучки
+ при запросе записей почемучка указвает, какие записи ему нужны из предложенного
  списка панхэшей: все, все кроме указанных, только указанные
= если доверие двух ключей (человек?) обоюдно, то высылать каждому записи обоих.
  возможно, стоит сделать рассылку записей по доверию. M оказал доверие N, если
  об N пришла запись - слать M, а возможно стоит ограничиться связями "следит за",
  а может сделать опционально одну из них или обе сразу.
  записи "следит за" расходятся по сети, в том числе и тому, за кем следят,
  чтобы он видел кто за ним следит
- при запросе объявлений выдавать только по такому же региону, смотреть по панхэшу
- добавить публичный нотариальный сервис, подписывающий не тело, а хэш записи


8. ОХОТА И СОБЫТИЯ

- "уведомитель" отслеживает текущие изменения и рассылает уведомления, может
  подготавливать "анонс" перед запуском охоты
- три режима охоты: ручная, интенсивная (каждые 5 мин, если на месте), редка
  (каждые 15 мин, отошёл) охота включается автоматически, если нажата кнопка
  "auto_hunt" и задан соответствующий параметр для не совсем доверенных узлов охота
  пропускается: (0.35-0.7) - через раз, (0.0-0.35) через два. возможны другие формулы
  охоты в зависимости от уровня доверия, и от того, включен слушатель или нет
- поиск соседей в сети, возможно широковещалкой, а возможно перебором адресов
- кроме ручного запуска, и запуска по шедулеру, охота происходит также при появлении:
  а) нового поискового запроса, б) рыбацкого запроса (поиск рыбки)
- в поисковых/рыбацких запросах передаётся: рекомендуемая глубина поиска, текущая глубина
  запроса, инициатор, время создания, цепочка посредников. при достижении определенной
  глубины и не нахождении данных/рыбки узел вправе вернуть код неудачного запуска или
  проигнорировать. запросы рассылаются по дереву доверия и при нахождении записи/рыбки
  возвращаются к инициатору
- запросы кэшируются в память в виде анонсов со сслыками на записи. спустя время
  подчищаются мусорщиком
!- баг: постоянно пытается переподключиться, даже если втречная сторона сама уже
  подключилась
- запилить прослушивание сразу всех интерфейсов, и на IP4, и на IP6
- сделать синхронизацию городов


9. СОПРОВОЖДЕНИЕ ПРОЕКТА

= написать документацию для юзера, админа и хакера
= найти переводчиков, полностью заполнить языковые файлы (lang)
- найти пиарщиков, постящих новости на популярных сайтах
- придумать справедливый механизм формирования совета управления проектом
  и выбора главы совета, распределения полномочий
- придумать ясный механизм оценки работ и распределения фонда проекта


