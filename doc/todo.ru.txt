
Что сделать
(- не сделано, = начато, + сделано):

- при удалении записи создавать связь "игнорировать", чтобы больше не загружалась
- вкладка "игра" открывается кнопкой из окна "диалог", или командой из списка
= в окне "статья" три вкладки: вид, вики/код, голый текст/байт-редактор
= в каждом окне вкладка "Служебное": язык, панхэш, автор, флаги "отправлено", "изменено"
= работа с подписями: создание, проверка. проверять подписи при получении, ставить галку "сверено"
= пустой цикл/проверка живости
= сообщения, шифрованные сообщения
- работа с каналами (медиа, игра): запуск, пауза, останов, закрытие
+ осмысленные имена у вкладок диалогов: а) имя; б) имя ф.; в) фамилия и.; г) имяN; д) панхэш[3:1,6:2]
- возможны пять видов подключения:
  1) первичное, для полноценного обмена (прямое соединение, или труба)
  при этом могут существовать публичные узлы, поддерживающие отдачу публичных данных (например,
  энциклопедических статей или анкет исторических деятелей) без авторизации
  2) вторичное встречное, для проверки обратного адреса и порта (если новый, или изменились)
  3) упрощенная авторизация, чтобы другие оствляли текстовые сообщения (без авторизации, но с капчой)
  4) веб-морда на отдельном порту для самого себя, чтобы удаленно управлять своим узлом
  5) возможно, на отдельном порту сервис xmpp
  упрощенные узлы могут работать в качестве шлюзов текстовых сообщений
= пандора-шлюзы существуют для "сбора" соединений на подключившегося "агента",
  могут быть написаны на других ЯП (питоне, пхп), запускаются на хостах с ip доступными извне,
  например, на узлах хостеров. шлюзы имеют упрощенную авторизацию для агентов и просто перенаправляют
  трафик с подключившихся охотников на агента в формате "труба". при этом шлюз может иметь примитивную
  фильтрацию трафика, например, при попытке передать видео или превышении лимита, отрубать охотников
- труба реализуется типом сегмента pipe. узел-инициатор запрашивает ключ-цель, при этом
  указывает, допускает ли он рыбалку или нет. если ключ-цель на данном узле не активирован, и рыбалка допустима,
  узел-посредник (шлюз или "хозяин пруда") ищет на каких узлах пасется ключ-цель и запрашивает к ним
  подключение трубы от рыбака. если узел-цель (рыбка) принял "рыбалку", то узел-посредник регистрирует номер
  трубы на рыбака, и рассылает рыбаку и рыбке подтверждение о трубе, а также ограничения (допустимые типы
  сегментов, скорость обмена, лимит трафика) после чего рыбак и рыбка начинают обмен в трубе через
  сегменты: pine:[number]. управление трубой ведется через сегмент channel:[pipe_codes]. при этом рыбак
  и рыбка должны союлюдать требования посредника (не слать запретные сегменты, не превышать лимиты).
  узел-постредник может вмешаться в обмен рыбака и рыбки, если увидит недопустимые сегменты, превышение
  трафика и т.д., в этом случае посредник может наказать нарушителя баном. рыбалка штатно завершается,
  если рыбак или рыбка запросил закрытие трубы, или кто-то из них отключился.
  рыбалка может быть прозрачной для рыбака, т.е. рыбак может и не знать, что подключился к шлюзу,
  такой режим работы естественнен для шлюзов, но не характерен для узлов-посредников.
  чтобы рыбак умышленно не забивал очередь шлюза, пропуская пакет, можно ограничивать очередь для
  неавторизованных рыбаков (например до 3х сегментов), и расширять её для авторизованных (до 30)
= инициализация сеанса: в приветствии "кто"-"кому". если неизвестен ip, "кто" или "кому", то задается хэш-задачка,
  также неизвестным задается каптча, и всем задается подписать фразу. для хэш-задачки высылается фраза размером
  256 байт, где последним байтом задается размер пар бит N загадки с начала фразы, а предпоследним - число секунд M.
  отгадка - это фраза, плюс некоторое число любых байт найденых перебором так, чтобы первые N пар бит хэша
  sha256 от отгадки совпали с загадкой. если охотник нашел отгадку, то спустя M секунд пересылает "добавку"
  слушателю, если прислал позже или равно M секунд, то слушатель добавляет её к фразе и берет хэш,
  если совпало, идет дальше (запрашивает подпись), инчае банится на 15 минут.
  также охотник банится на 3 минуты, если отключился без ответа на загадку.
  банлист динамический (в RAM) и набирает штрафные баллы увеличивая время бана при повторных косяках.
  хэш-задачка может быть: отключена, включена для неизвестных ключей (по умолчанию), включена для всех
  эта же фраза используется для подписания. но подписывается не сама фраза, а хэш384 от нее, что
  предотвращает подсовывание на подпись осмысленных данных. каптча задается уже после подписания, если ключ
  неизвестный, после чего ключ помещается в "отстойник". если капча пришла, то ключ переводится на подтверждение,
  когда доверие установлено (ключ подтвержден), тогда возможен полноценный обмен.
  до авторизации с доверием узлы находтся в списке по "ip, port", после - в списке "key, base_id".
  до полноценной  авторизации другие подключения с данного "ip" блокируются
- бан-лист ip в памяти. штрафовать:
  1) подключился и отключился - 1 мин
  2) подключился, отправил хело, но не ответил на хэш-загадку - 2 мин
  3) прислал отгадку раньше срока - 30 сек
  4) прислал неверную отгадку - 10 мин
  5) прислал отгадку в срок и верную, но отключился, не прислав подписи - 2 мин
  6) прислал неверную подпись - 10 мин
  7) прислал неверную капчу - 2 мин
  8) подключился повторно раньше чем через 5 мин, хотя был ответ "ключ на рассмотрении" - 5 мин
  9) при повторном нарушении сроки штрафов суммируются и удваиваются
  10) замолчал во время связи и не отвечает более 1 мин - 1 мин
  11) прислал неадекватный сегмент для текущей стадии - 5 мин
  12) авторизация с одного ip со вторым неизвестным ключом с интервалом менее 2 ч - 15 мин
  узлы-штрафники могут быть подписанны и разойдутся как негодяи
- защита от ддоса: объем пакетов до авторизации ограничен 1200 байт, число шагов не более 5,
  объем трафика от неавторизованных узлов не более 3*(1200*5)байт/час, если нарушил - бан на сутки
- условия, исключающие хэш-загадку и капчу (но не исключающие подпись):
  1) ip есть в списке узлов и помечен как статический
  2) есть в ram-списке недавно авторизованных узлов
  такие узлы не подвергаются мелким штрафам, но сумма штрафа накапливается, а при достижении 30 мин
  узел банится и низвергается до обычного (с хэш-загадкой и капчой)
- запись при обмене
  +1) запрос и запись ключа до авторизации (в память?)
  +2) запись/обновление узла (и ключа?) после авторизации
  +3) запрос и запись анкеты (если ключ доверен)
  =4) установление связи "пришел с", если рыбалка, или отдельный узел?
  -5) запрос новостей, запрос других записей и их запись
- "обязательно сверяйте ключ по телефону! отзывайте доверие, если ключ не прошел сверку!"
  "сверка": тип (ключ, хэш256, хэш384..), длина (6), позиция (случайно, 1,2..)
  возможно стоит разрешить голосовую сверку после капчи (с предварительным запросом) с записью разговора
- генерация "отмычек" для каждого новичка, они хранятся в базе "отмычки" и диктуются для расшифровки ключа
  сделать настройку: "для новых запрашивать шифрованный ключ на случайной отмычке"
- сборщик мусора запукается чз 20 мин после старта и подчищает "тухлятину": у чего вышел срок 5 дней и не было
  оказано поддержка или доверие. подчищаются без поддержки чз 5 дней, или поддерживаемые с доверием меньше -0.5.
  сборщик работает неспеша, засыпает на 1 сек после каждой операции, а если есть медиа-обмен, то замораживается.
  при сворачивании или бездействии интервал сокращается до 0.3 сек, при отсутствии соединений до 0.2,
  а при выключенном слушателе до 0.1 сек. 5 дней могут быть и больше для записей от доверенных создателей.
  если запись пролежала без поддержки 5 дней после midified, то сначала мусорщик помечает её как удаленную,
  скрывая из вида пользователя, а спустя 3 месяца полностью удаляет запись.
  если пришла связь по удаленной записи (лайк, публикация и т.д.) или подпись, то запись "восстанавливается"
  из удаленных. возможно, не восстанавливается, но её данные используются в ленте новостей для понимания
= приоритет отдачи данных: сообщения, (игра,) звук, видео, записи
- если есть потери, снижать нагрузку: замедлять записи, снижать качество видео, аудио
- параметры есть общие (creator=nil), а есть личные (creator задан), указывается при записи,
  при чтении сначала ищется личный, если не найдет, читается общий
- симметричный ключ для шифрования локальных данных (сообщений) зашифрован на ассиметричном,
  создаётся автоматически при необходимости, хранится в отдельном личном параметре
- сеансовый ключ, создается при сеансе связи, прикрепляется к ключу собеседника, шифруется на симметричном
  ключе для локальных данных, панхэш которого также записывается в тело
- всего 3 типа ключа: 1) открытый, тело содержит только ключ, 2) закрытый паролем, тело содержит IV и шифроблок,
  3) локальный или сеансовый (шифрован на другом), тело содержит панхэш ключа и шифроблок
= настройки кодеков и конвейеров
  видеокодеки vp8, theora, jpeg, smoke, x264, h264, vp9, аудиокодеки speex, vorbis, opus, mulaw,
  параметры: источники (win, lin), кодеки, входные и выходные конвейеры,
  в окне "диалог" возможность выбирать кодеки передачи, а также и контейнер при записи в файл
- охота: обмен записями
- "почемучка" запрашивает типы записей и время с которого начать (и закончить)
- "ответчик" согласно разрешениям и доверию к ключу выдает записи и подписи к ним, перед отправкой
  он предлагает пачки панхешей почемучке, а почемучка уже конкретно говорит какие надо
  публичные записи предлагаются всем в рамках схемы доверия (или вобще всем, или отдельная схема для публичных
  записей)
- здание на охоту (в превом приближении) строится так:
  1) почемучка смотрит, какие записи он запрашивает у этого узла, это задается отдельным полем узла,
  или параметром в настройках для данного диапазона доверия
  2) почемучка берет время последнего запроса, вычисляет интервал с текущего времени, прибавляет 5
  мин (запас, задается параметром в настройках), и делает запос ответчику
  3) ответчик вычисляет нижнюю границу и отвечает
  ответчик может: а) слать повторы; б) не повторять записи после этого времени; в) слать, но в зависимости
  от доверия. т.е. для малодоверенных по 10 раз одно и то же не высылать, обойдутся. также ответчик может
  задавать свой "запас"
  4) в конце высылки данных, ответчик высылает код окончания передачи
  5) почемучка фиксирует время и шлет подтверждение. если почемучка доверенный, то ответчик фиксирует время
  только как получит подтверждение, а если малодоверенный, то фиксирует время без базара
- "уведомитель" отслеживает текущие изменения и рассылает уведомления, может подгототавливать "аннонс"
  перед запуском охоты
- три режима охоты: ручная, интенсивная (каждые 5 мин, если на месте), редкая (каждые 15 мин, отошёл)
  охота включается автоматически, если нажата кнопка "auto_hunt" и задан соответствующий параметр
  для не совсем доверенных узлов охота пропускается: 0.35-0.7 через раз, 0.0-0.35 через два.
  возможны другие формулы охоты в зависимости от уровня доверия, и от того, включен слушатель или нет
- поиск соседей в сети, возможно широковещалкой, а возможно перебором адресов
- проброс соединений: охотник A запрашивает у слушателя B проброс на узел C.
  если C подключен, ему сообщается
  если C отключен, но слушает, к нему подключается
  если C отключен и не отзывается, A запрашивает у B "рыбалку" узла C
  вопрос B рыбаку A: будет ждать (10 мин макс) или периодически подключаться (каждую 1 мин)?
  если A ждет - он висячий рыбак
  если A периодически опрашивает - он прыгающий рыбак
  если C подключился к B, то B сообщает C что на него идет рыбалка от A, далее одно из трёх:
  * C подключается к узлу A напрямую при встречном простреле NATов
  * начинается разговор между A и C через B, если еще A висит
  * узел B даёт узлу C время на встречную висячую рыбалку узла A (10 минут), если A прыгающий
  если прыгающий A появился за это время, их соединяют, если нет - оба рыбака снимаются с рыбалки
  рыбаки снимаются с рыбалки также по таймауту (10 мин)
  на узле B задается максимальное число заявок на рыбалку, например 500
  кроме того задается максимальное число подключенных рыбаков, например 20
  в заявке на рыбалку может фигурировать не только узел, но и панхеш человека или ключа
  узел B может задавать ограничения на объем трафика в ед. времени или запретить медиа-обмен
  Узел B может задать ограничения на типы сегментов: прострел, сообщения и т.п.
  Также B может требовать шифрование только на ключе B, нераспознанные сегменты могут быть запрещены.
  Рыбалка может быть многоуровневой: A спросил C у B, B переправил заявку D, E, F и т.д.
  Примитивные посредники могут быть написаны на php, python, C и т.п., и работать на хостинге.
- автоматическое конвертирование при изменении структры базы, выводится форма с переносом полей
- расчет рейтинга ключей, людей и других записей; с учетом активного юзера и без;
  запись рейтингов ключей в базу, пересчет и измнение при получении новой записи
- шедулер, который пасёт каталог/файл и при его изменении, подгружает записи
- шедулер, который пасёт таблицу во внешней базе и при её изменении, импортирует записи
= редактор кода, файл pandora.rb как один из документов
- отчеты в формате ODF, логика их расчета в отдельных модулях
  универсальная форма печати любой записи в форматах A4, A3 и т.д.
= публикация в виде: 1) поле "публикатор", "дата" у записи; 2) связь "опубликовал"
  связь "публикую" содержит значение: (255-диапазон)..255 = (255-20)..255, 235..255.
- прострел NATов через: UPnP (IGD?) - for local, NAT-PMP, STUN, SOCKS, NAT-T (in IKE),
  TURN, RSIP, MIDCOM, ICE, Teredo(miredo), SBC, SYN-TCP, UDP-pounching, ALG
= написать документацию: для юзера, админа и хакера
= найти переводчиков, полностью заполнить языковые файлы (lang)
- сделать кнопку "переводы" в статус-строке, чтобы выделялась, когда есть непереведенное для
  текущего языка. автоматически сохранять языковые файлы как публичные и распространять внутри сети
= цвет вкладки: узлы отключены, подключены всё, подключены не все, получено сообщение, есть голос/видео,
  состояние значка в трее аналогично
- шифровать закрытый ключ алгоритмом AESом на паре p/q, созданной из располовиненого блока:
  хэш384(xor146(пахэш юзера+хэш256(rot13(дата создания+(хэш256 пароля)))), использовать xor-наложение одной
  половины каждого значения на другое, чтобы перемешать данные. в этом случае: а) атака через радужные
  таблицы потеряет смысл; б) время перебора заметно удлинится; в) исходные пароль аналитически не вычисляем.
- подпись на хэш384 для ключа и хэш256 для остальных записей
= сеанс связи: приветствие, капча (открывается в диалоге, даётся 5 мин, 3 попытки), запрос ключа/персоны,
  ключ принимается в состоянии "закодирован" и ждет подписания (доверия), до того как ключ раскодирован/сверен
  сеансы связи обрываются, после - возможны. для прошедших капчу доверие 0.01 (настраивается), для слушателей
  по умолчанию доверие тоже 0.01. возможно, после прохождения капчи, у ключа ставится метка "captched",
  и в дальнейшем повторно не требует капчу
- должны быть обязательные поля у каждой записи (require=1), иначе не принимается узлами
- в каждом списке возможность настраивать фильтры, сортировку и колонки
- в списке "узлы" возможность отображать узлы из базы, или узлы из памяти
- выбор панхэша во всплывающем окне со списком объектов,
  есть фильтр, сортировка, поиск. чаще всего выбор панхэша ограничен потомками одного типа объектов,
  но иногда это может быть группа, или даже все типы (связь)
- возможен интерактивный поиск - при вводе текста в таблице, сразу переход
- возможен интерктивный фильтр - ..сразу фильтруется
- интерактивность возможна как в таблице (списке), так и на панели в отдельном поле
- фильтр - это дополнительная однострочная таблица над (или под) основной, в которой используются
  адекватные виджеты
- сортировка по заголовкам основной таблицы, а порядок меняется порядком столбцов
- наличие фильтра в списке объектов и его использование при: выборе панхэша, в доп. вкладках при вводе
- возможность генерировать симметричные ключи: а) в самом окне ввода; б) отдельной функцией?
- для доверенных (>0.5) кнопка "вызов" в диалоге, при этом проигрывается заданный муз. файл
  для доверенных их звук (>0.6) и видео (>0.7) без подтверждения, для остальных - с подтверждением
- для особо доверенных даже можно мою исходящую камеру (=1.0) и звук (>0.95) разрешать самим включать,
  но для этого на должна быть нажата специальная кнопка "можно слушать супердоверенным",
  также перед включением прослушки/просмотра проигрываются отдельны(й,е) файл(ы) (или "вызов"),
  возможно робот прогаваривает "вас просматривает/прослушивает два-эф-пять-три-цэ" (панхэш)
- сразу после подключения собеседник видит, что ему можно (появляются нужные галочки и кнопки)
- собеседник также видит список поддерживаемых вашей стороной аудио и видео кодеков (в виде списка)
  если слушатель включен, то охоту, сделав раз, можно делать или реже, или вообще приостанавливать
- при запуске программы, если уже открыта эта база, то активизировать ту программу, а эту закрывать
- при генерации ключа выводить форму ввода человека, если нет людей,
  если есть - предлагать список, но при этом чтобы можно было вводить нового
- при охоте выводить форму ввода узла, если нет узлов
- при вводе узла порт по умолчанию 5577
- первый байт в сегменте случайный, остальные xor-ятся на нём, чтобы предотварить фильтрацию
  приветствие закодированно, нет служебных слов
- у объекта "Сообщество" и его потомков галочка "вступить" с движком, которая создает подписанную связь
  с заданным уровнем доверия
- отдельная вкладка у записи "Структура", там поле "формат" (json,xml,pson-base64) и поле "сравнить с",
  в котором задается другая подобная запись и показывается результат сравнения (в виде diff)
- загрузка/выгрузка [во] внешни[х,е] таблиц[ы], баз данных в разных форматах: csv, xml, json, pson, dbf,
  ods, xls. при выгрузке возможность указывать какие столюбцы и какие записи. при загрузке - соответствие
  полей таблицы/базы с полями объекта
- у записей "Created" будет галка "инкогнито", при ее включении, поле "creator" забивается нулями. тем не менее
  функции подписывания сохраняются - автор как бы подписывает анонимную запись, а не свою, это нужно, когда
  автор не заинтересован в распространении своего авторства. при это на узлах может стоять запрет в принятии
  анонимных записей, об этом сообщается при инициализации соединения. если узел проигнорил это требование и
  начал пулять анонимные записи (с "creator"=0), то собеседеник применяет санкции (бан)
- при создании доверия ниже 0.0 справедливо требовать "мнени(е,я)", и говорить об этом в приветствии, если
  нарушено (прислал отрицательную ЭЦП без подписанного мнения) - бан. отриц. ЭЦП+мнение принимать и записывать
  как одно целое: в одном сегменте (?) и в одной транзакции
- в статус строке иконки (серые, когда не активны) + появляющийся рядом при необходимости текст
- интерактивное обновление таблиц
+ защита от повторного запуска
- установка teredo: для линукса ставить через "apt-get install miredo", для винды прописать:
  "netsh interface teredo set state type=client"
- сохранение сообщений при получении на панхэш ключа и/или человека,
  при открытии диалога подгружать историю
- при наличии непрочитанных сообщений дать возможность открыть диалоги одним щелчком по трею,
  снимать статус "есть непрочитаннынные" только когда всё прочитано
- на каждом узле есть волынщик, его функции: 1) искать клиентов с заданным цель-ключом (при необходимости
  подключаться); 2) запрашивать у них трубы для заданных рыбак-ключей; 3) пересылать данные между рыбаками.
  рыбалка может быть явная, когда узел-рыбак запрашивает цель, а может быть неявная, когда узел, думает, что
  шлюз и есть истинная цель. при неявной рыбалке развитие событий по двум путям: а) узлу сообщается, что для него
  открыта труба; б) с узлом ассоциируется труба, но ему не сообщается.
  рыбацкие данные передаются волынщику, он помещает их в очередь и стравливает по мере возможности.
  индексацию сегментов для конкретного рыбака ведёт сам волынщик.
  неявная рыбалка по-умолчанию начинается автоматически, если узел в качестве цели указал чужой ключ (не
  текущего держателя узла). рыбки регистрируются специальным типом связи: ключ-пришел_с-узел.
  в дальнейшем, если прямое соедние не удалось, рыбалка организуется через эти связи.
  рыбак - узел, который запрашивает связь с ключом, не активированном на держателе.
  рыбка - узел, которые находится волынщиком держателя среди активных соединений, или который активировал
  сам волынщик по заданному запросу. для держателя не разницы между рыбаками и рыбками, для
  волынщика - только до их сведения, а дальше он тоже разницы не делает, считая всех рыбаками.
  держатель - узел с работающим волынщиком, т.е. узел-посредик передающий данные рыбаков.
  программно, волынщик - это отдельный поток (thread), который принимает данные от активных соединений
  и распределяет их по буферам отправки нужных соединений. отправкой буферов занимается уже поток отправки
  соединения. при этом нумерацией сегментов занимаются сами соединения при извлечении данных их буфера
  отправки и их отправлении. уже отправленные сегменты хранятся в одельной очереди отправленных сегментов
  для коррекции потерь
- записи, размером значительно больше сегмента, могут запрашиваться в режиме распределенного сбора - жатвы.
  вначале жнец формирует карту сбора, затем добавляет задание "жатва" и создает массовую рассылку запросов
  (панхэша записи) на жатву, после получения ответов, жнец создает список кустов, после чего приступет к
  запросу и сбору семян (порций данных с заданным смещением и размером). несобранная запись помечается
  флагом "собирается", при этом сразу ставится нормальный панхэш. такие записи не подлежат открытию или
  передаче другим узлам до тех пор, пока запись не будет полностью получена и флаг "собирается" снимется.
- задания на рыбалку, жатву и поиск собираются в списке "Пандора-Задания". при подключении любого узла
  почемучка передает ему задания. задания снимаются после выполнения (или для поиска и рыбалки удаляются
  сборщиком мусора по истечении срока). также задания на рыбалку удаляются, если рыбак-инициатор в отключке
  больше заданного срока
- сделать счетчик трафика в стутус строке: "принято/отправлено". обновлять раз в секунду по таймеру,
  таймер активировать из send_comm_and_buf через Gtk::Timeout, при этом запускать, только если не запущен,
  объект таймера не обязательно должен перезапускаться, достаточно ставить флаг о незакрытии таймера.
  если в течение 30 секунд не было данных и флаг не установлен, то объект таймера завершается.
  новый таймер запускается только если приращение данных больше 5кб
- при генерации очередного ключа, помещать его панхэш в параметр "unsaved_keys".
  если пришла положительная подпись ключа, и ключ не был сохранен, то зажигать желтую кнопку в статусбаре:
  "сохранить ключ". при нажатии на неё предлагать диалог сохранения, после сохранения удалять из
  параметра "unsaved_keys" панхэш ключа, чтоб больше не предлагал и скрывать кнопку.
  при пустом "unsaved_keys" за приходящими подписями ключей не следить
- открывать диалог ввода новой записи при открытии пустого списка панхэшей
- при авторизации, если ключа нет, предлагать выбрать из списка закртых ассиметричных ключей, если список
  пуст предлагать загрузку из файла или генерацию
- сделать виджет для ввода координаты в виде "широта/долгота"
- при запросе записей почемучка указвает, какие записи ему нужны из предложенного списка панхэшей:
  все, все кроме указанных, только указанные
- динамически формируемый список иконок панобъектов для разных размеров (menu, toolbar и т.д.)
- при поступлении новых записей формируются аннонсы в базе события, в них перечислены панхэши новинок,
  при наличии новых событий в статус строке новостной уведомитель показывает число новых непросмотренных записей,
  после прочтения/просмотра записи панхэш ставится признак "панхэш прочитан", если в анонсе все панхэши
  прочитаны, то анонс помечается как прочитанный. возможно стоит делать один анонс на один панхэш
- если не открыты медиа-каналы, или нет обмена данными, то в циклы чтения и записи добавить sleep 0.1
- если доверие двух ключей (человек?) обоюдно, то высылать каждому записи обоих.
  возможно, стоит сделать рассылку записей по доверию. M оказал доверие N, если об N пришла запись - слать M,
  а возможно стоит ограничиться связями "следит за", а может сделать опционально одну из них или обе сразу.
  записи "следит за" расходятся по сети, в том числе и тому, за кем следят, чтобы он видел кто за ним следит
- у узла счетчик заходов с одного узла увеличивается при переподключении с одного адреса. если число
  превысило 20, или 5, если предыдущее было вчера или позднее, то считается, что это статика, при этом
  ставится флаг "статический" и предпринимается попытка подключиться на этот адрес на порт 5577,
  если подключился и ключ ответил, то выставляется хост-адрес
- профиль пользователя: лента новостей с предварительным просмотром фотографий, с анонсами статей.
  фото могут: а) сразу загружаться полностью, б) сразу загружаться миниатюры, в) миниатюры загружаются
  при открытии ленты, а фото при полном просмотре, г) миниатюры сразу, а фото - при открытии ленты.
  возможно комбинирование способов в зависимости от доверия к пользователям - для пользователей с высоким
  доверием сразу и полностью загружать записи, а для пользователей с маленьким - только при щелчке в ленте
- в приветствии передавать маску разрешений, состоящую из 16 пар бит: 0 - не поддерживаю, 1-желательно,
  2-требую, 3-имеет приоритет над другими подобными разрешениями. разрешения: 1) рыбалка 2) шифрование BF
  3) шифрование AES 4) rot13 5) zip 6) шифрование видео 7) шифрование аудио.
  остальные пары бит зарезервированы на будущее
- если после того как пропал пакет пришло больше 70 пакетов или прошло больше 1 сек, то запрашивать
  повтор ECC_Sync_Repeat. если чз 3 сек или 100 пакетов так и не пришло, ECC_Sync_CriticalRepeat.
  если еще чз 3 сек и 110 пакетов, то разрыв. отправитель повторяет только пакет при Repeat, а при
  Critical останавливает очередь нумерованных и снижает медиа-отдачу


